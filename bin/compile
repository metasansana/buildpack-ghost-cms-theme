#!/usr/bin/env bash

## Configure environment

set -o errexit    # always exit on error
set -o pipefail   # dont ignore exit codes when piping output

## constants
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
TMP_THEME_DIR=/tmp/app-theme
BUILD_PACK_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
BUILD_PACK_APP_DIR=$BUILD_PACK_DIR/app
PACKAGE_FILE=$BUILD_DIR/package.json

## Load dependencies
source /dev/stdin <<< "$(curl --silent --retry 5 --retry-max-time 15 \
   'https://lang-common.s3.amazonaws.com/buildpack-stdlib/v7/stdlib.sh')"

source $BUILD_PACK_DIR/lib/constants.sh
source $BUILD_PACK_DIR/lib/package.sh

## Make a copy of the theme before we mess things up.
ghost_preserve_theme() {

  puts_step "Preserving theme for use with ghost installation..."

  mkdir -p $TMP_THEME_DIR

  find $BUILD_DIR -maxdepth 1 -name 'assets' -exec cp -Rt $TMP_THEME_DIR {} \+

  find $BUILD_DIR -maxdepth 1 -name 'partials' -exec cp -Rt $TMP_THEME_DIR {} \+

  find $BUILD_DIR -maxdepth 1 -name '*.hbs' -exec cp -t $TMP_THEME_DIR {} \+

  find $BUILD_DIR -maxdepth 1 -name '*.json' -exec cp -t $TMP_THEME_DIR {} \+

  find $BUILD_DIR -maxdepth 1 -name 'content' -exec cp -R -t $TMP_THEME_DIR {} \+

  echo 'App theme folder contents: '

  ls -la $TMP_THEME_DIR

}

## Install ghost-cli using the version the theme declares in the "engines" 
## section defaulting to latest if not specified.
ghost_install_cli() {
  
  puts_step 'Installing ghost-cli...'

  npm install -g "ghost-cli@$(package_get_cli_version $PACKAGE_FILE)"

}

npm_install() {

  if [ -e $1/$2/package.json ]
  then

    pushd $1/$2

    npm install

    popd

  fi

}

## ghost-cli install won't work in the buildpack environment so we have to
## write runtime files in a temporary location and continue at runtime.
ghost_write_runtime_files() {

  local ghost_dir="$BUILD_DIR/$GHOST_WWW_DIR_NAME"
  local additions_dir="$BUILD_DIR/$GHOST_ADDITIONS_NAME"

  mkdir -p $ghost_dir $additions_dir

  puts_step "Created ghost blog folder. Ghost will run in $ghost_dir."

  puts_step "Copying app files to $BUILD_DIR..."

  cp -Rn $BUILD_PACK_APP_DIR/* $BUILD_DIR

  puts_step "Adding jq for runtime use..."

  cp $BUILD_PACK_DIR/vendor/jq $additions_dir

  puts_step "Checking for custom config file..."

  if [ -e $TMP_THEME_DIR/config.production.json ]
  then

    puts_step "Copying config.production.json file to $additions_dir..."

    cp $TMP_THEME_DIR/config.production.json $additions_dir

  fi

  puts_step "Checking for custom content folder..."

  if [ -d $TMP_THEME_DIR/content ]
  then

    puts_step "Found custom content. Copying to $additions_dir..."

    cp -R $TMP_THEME_DIR/content $additions_dir

    puts_step "Installing any dependencies"

    find $additions_dir/content -type d -exec npm_install $additions_dir/content {} \+

    puts_step "Contents of content folder in $additions_dir:"

    ls -la $additions_dir/content

  fi

  puts_step "Final contents of $additions_dir:"

  ls -la $additions_dir

}

ghost_main() {

  ghost_preserve_theme
  ghost_install_cli
  ghost_write_runtime_files

}

ghost_main
